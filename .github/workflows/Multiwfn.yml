name: Build latest Multiwfn on Windows

on:
  push:
    branches:
      - master

env:
  Multiwfn_version:  Multiwfn_3.8_dev_src_Linux
  BUILD_TYPE: Release
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/c95a3b26-fc45-496c-833b-df08b10297b9/w_HPCKit_p_2024.1.0.561_offline.exe
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  WINDOWS_MKL_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/78da61ee-8ded-4aab-8964-fea48243b05e/w_onemkl_p_2024.1.0.696_offline.exe
  WINDOWS_MKL_COMPONENTS: intel.oneapi.win.mkl.devel

jobs:
  Windows:
    runs-on: windows-2022

    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Cache Code
      #   id: cache-code
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{github.workflow}}\${{env.Multiwfn_version}}\build
      #     key: ${{ runner.os }}-ifort-2025.0-code

      - name: "Setup cache for dependencies"
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install flint dependencies via vcpkg
        run: |
          vcpkg install flint:x64-windows-static arb:x64-windows-static --binarysource="clear;x-gha,readwrite"

      - name: Install Fortran compiler/MKL and Visual Studio 2022 integration
        run: |
          .github/scripts/install_ifort.bat ${{env.WINDOWS_MKL_URL}} ${{env.WINDOWS_MKL_COMPONENTS}}
          .github/scripts/install_ifort.bat ${{env.WINDOWS_HPCKIT_URL}} ${{env.WINDOWS_FORTRAN_COMPONENTS}}

      - name: Activate compiler environment and Copy libiomp5md.dll to working directory
        run: |
          .github/scripts/activate_env.bat

      - name: Download Multiwfn and dislin source code 
        run: |
          curl -L http://sobereva.com/multiwfn/misc/${{env.Multiwfn_version}}.zip -o Multiwfn_src.zip
          7z x Multiwfn_src.zip

          # dislin for windows ifort
          curl -L https://www.dislin.de/downloads/win64/dl_11_ic.zip -o dislin.zip --insecure
          unzip dislin.zip -d temp
          copy-Item -Path "temp\disifl_d.lib"  -Destination  . -Force
          dir
        
      - name: Configure build for amd64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          toolset: 14.29

      - name: Compile Multiwfn
        shell: cmd
        run: |
          cd ${{env.Multiwfn_version}}
          copy ..\CMakeLists.txt . /Y
          copy ..\disifl_d.lib . /Y
          md build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFLINT_INCLUDE=C:\vcpkg\packages\flint_x64-windows-static\include -DFLINT_LIB=C:\vcpkg\packages\flint_x64-windows-static\lib\flint.lib -A x64
          cmake --build . --config ${{env.BUILD_TYPE}} --target install 
          
          dir ${{env.BUILD_TYPE}}

      - name: Copy Multiwfn and dll to working directory
        shell: pwsh
        run: |
          md tempfiles
          Copy-Item -Path "${{env.Multiwfn_version}}\build\${{env.BUILD_TYPE}}\Multiwfn.exe"  -Destination "tempfiles\" -Force
          #Copy-Item -Path "C:\vcpkg\packages\arb_x64-windows-static\bin\*.dll"               -Destination "tempfiles\" -Force
          dumpbin /dependents tempfiles\Multiwfn.exe
          
          # misc 
          Copy-Item -Path "${{github.workspace}}\misc\*"  -Destination "tempfiles\" -Force -Recurse
          # dll
          Copy-Item -Path "*.dll"                         -Destination "tempfiles\" -Force
          
      - name: Upload Multiwfn
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: Multiwfn_Win_x64
          path: |
            .\tempfiles\*
            .\flint_staticlib\*


  # refer to https://github.com/endless-sky/endless-sky/blob/master/.github/workflows/cd.yaml
  Release:
    needs: [Windows]
    runs-on: ubuntu-20.04

    env:
        RELEASE_COMMAND: release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: bleed

    steps:
      - uses: actions/checkout@v3

      - name: Install github-release
        run: |
          go install github.com/github-release/github-release@latest
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Set environment variables
        run: |
          echo "RELEASE_TAG=bleed" >> $GITHUB_ENV
          echo "TIME=$(date -u '+%Y.%m.%d')" >> $GITHUB_ENV
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      # - name: Move/Create continuous tag
      #  run: |
      #    git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
      #   git push --tags --force
      
      - name: Check continuous release status
        run: |
          if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
          else
            echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
          fi
      
      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
          This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          github-release ${{env.RELEASE_COMMAND}} --tag ${{ env.RELEASE_TAG }} --name "Bleed Release" --description "$DESCRIPTION" --pre-release
      
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Multiwfn_Win_x64

      - name: Package Windows artifact to release
        run: |
          ls -alt
          # time stamp
          OUTPUT_TAR=$(echo ${{env.Multiwfn_version}} | cut -d '_' -f1,2,3)_Win_x64_$(date -u '+%Y.%m.%d')".tar.gz"
          tar -czvf ${OUTPUT_TAR} *.dll *.exe examples *.ini *.txt *.pdf
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${OUTPUT_TAR} --file ${OUTPUT_TAR}

          # flint-staticlib
          OUTPUT_TAR=flint-static-lib.tar.gz
          tar -czvf ${OUTPUT_TAR} *windows-static
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${OUTPUT_TAR} --file ${OUTPUT_TAR}
