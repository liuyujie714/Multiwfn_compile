name: Build Multiwfn Linux64 with mouse rotate

on:
  push:
    branches:
      - master
      
env:
  Multiwfn_version:  Multiwfn_3.8_dev_src_Linux
  
jobs:
  Linux-64:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install Dislin libraries
      run: |
        wget https://www.dislin.de/downloads/linux/i586_64/dislin-11.5.linux.i586_64.tar.gz
        tar -xf dislin-11.5.linux.i586_64.tar.gz
        export DISLIN=$PWD/dislin
        cd dislin-11.5
        ./INSTALL
        cd ..
        ls $DISLIN/                  
        echo "PATH=$PATH:$DISLIN/bin" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$DISLIN:$LD_LIBRARY_PATH" >> $GITHUB_ENV 
        sudo apt install p7zip-full libxm4 libmotif-dev libgl1-mesa-dev libgmp-dev libmpfr-dev

    - name: Download Multiwfn and Modify
      run: |
        rm -rf ${{env.Multiwfn_version}}
        curl -L http://sobereva.com/multiwfn/misc/${{env.Multiwfn_version}}.zip -o Multiwfn_src.zip
        7z x Multiwfn_src.zip
        cp GUI_modify.f90 ${{env.Multiwfn_version}}/GUI.f90
    
    # - name: Build static flint
    #   run: |
    #     vcpkg install flint:x64-linux-release arb:x64-linux-release
    #     ls /usr/local/share/vcpkg/packages/flint_x64-linux-release/lib
    #     ls /usr/local/share/vcpkg/packages/gmp_x64-linux-release/lib
    #     ls /usr/local/share/vcpkg/packages/mpfr_x64-linux-release/lib
    #     ls /usr/local/share/vcpkg/packages/arb_x64-linux-release/lib

    - name: Build static flint
      run: |
        curl -L https://github.com/flintlib/flint/releases/download/v3.2.1/flint-3.2.1.tar.gz -o flint.tar.gz
        tar -xvf flint.tar.gz 
        rm -rf flint.tar.gz
        cd flint*
        ./configure --enable-static --enable-avx2 --prefix=${{github.workspace}}/flint
        make -j4
        make install
        ls ${{github.workspace}}/flint


    - name: Install Intel oneAPI compiler
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-compiler-fortran-2021.4.0 intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2021.4.0 intel-oneapi-mkl-2021.4.0 intel-oneapi-mkl-devel-2021.4.0
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Test ifort
      run: |
        ifort --version
        ls -al /opt/intel/oneapi/mkl/latest/lib/intel64

    - name: Build fortran-xlib
      run: |
        git clone https://github.com/interkosmos/fortran-xlib.git
        cd fortran-xlib
        ifort -O2 -c src/xlib.f90
        ifort -O2 -c src/xpm.f90
        ar rcs libfortran-xlib.a xlib.o xpm.o
        cp libfortran-xlib.a xlib.mod ../${{env.Multiwfn_version}}
    
    - name: Compile Multiwfn
      run: |
        cd ${{env.Multiwfn_version}}

        # use staitc flint 
        sed -i "s|INCLUDE = -I./ -I./ext|& -I${{github.workspace}}/flint/include|" Makefile 
        sed -i "s|^LIB_base =.*|& ./libfortran-xlib.a ${{github.workspace}}/flint/lib/libflint.a /usr/lib/x86_64-linux-gnu/libmpfr.a /usr/lib/x86_64-linux-gnu/libgmp.a|" Makefile
        sed -i 's/-lflint -lflint-arb//g'  Makefile
        
        # fix ifort compiler C bind issue for Bool, add '-fpscomp logicals'
        sed -i 's/-mkl/-qmkl -fpscomp logicals /g' Makefile

        cat Makefile
        make GUI WITH_FD=1 OS=Ubuntu -j4 

    - name: Check dependents
      run: |
        ldd ./${{env.Multiwfn_version}}/Multiwfn

    - name: Pack Multiwfn
      run: |
        curl -O -L http://sobereva.com/multiwfn/misc/Multiwfn_3.8_dev_bin_Linux.zip
        unzip temp.zip
        cd Multiwfn_3.8_dev_bin_Linux && rm -rf Multiwfn
        cp ../${{env.Multiwfn_version}}/Multiwfn .

    - name: Upload Multiwfn
      uses: actions/upload-artifact@v4
      if: ${{ success() }}
      with:
        name: Multiwfn_Linux64
        path: |
          ./Multiwfn_3.8_dev_bin_Linux


# refer to https://github.com/endless-sky/endless-sky/blob/master/.github/workflows/cd.yaml
  Release:
    needs: [Linux-64]
    runs-on: ubuntu-latest

    env:
        RELEASE_COMMAND: release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: bleed

    steps:
      - uses: actions/checkout@v3

      - name: Install github-release
        run: |
          go install github.com/github-release/github-release@latest
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Set environment variables
        run: |
          echo "RELEASE_TAG=bleed" >> $GITHUB_ENV
          echo "TIME=$(date -u '+%Y.%m.%d')" >> $GITHUB_ENV
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      - name: Move/Create continuous tag
        run: |
          git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
          git push --tags --force
      
      - name: Check continuous release status
        run: |
          if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
          else
            echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
          fi
      
      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
          This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          github-release ${{env.RELEASE_COMMAND}} --tag ${{ env.RELEASE_TAG }} --name "Bleed Release" --description "$DESCRIPTION" --pre-release
      
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: Multiwfn_Linux64

      - name: Package Linux artifact to release
        run: |
          ls -alt
          # time stamp
          OUTPUT_TAR=$(echo ${{env.Multiwfn_version}} | cut -d '_' -f1,2,3)_Linux_x64_$(date -u '+%Y.%m.%d')".tar.gz"
          tar -czvf ${OUTPUT_TAR} -C Multiwfn_3.8_dev_bin_Linux .
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${OUTPUT_TAR} --file ${OUTPUT_TAR}
